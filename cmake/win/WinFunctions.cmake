function(librw_platform_target TARGET)
    cmake_parse_arguments(LPT "PROVIDES_WINMAIN" "" "" ${ARGN})
#    get_target_property(TARGET_TYPE "${TARGET}" TYPE)
#    if(MINGW)
#        if(TARGET_TYPE STREQUAL "EXECUTABLE")
#            #target_link_options(${TARGET} PRIVATE -Wl,--undefined,WinMain)
#            #target_link_options(${TARGET} PRIVATE -Wl,--undefined,main)
#        endif()
#        if(LPT_PROVIDES_WINMAIN AND TARGET_TYPE STREQUAL "STATIC_LIBRARY")
#            # Start with WinMain marked as undefined.
#            # This makes the linker keep a WinMain symbol from a static library.
#            #if(CMAKE_SIZEOF_VOID_P EQUAL 4)
#            #    target_link_options(${TARGET} INTERFACE -Wl,--undefined,WinMain@16)
#            #    message("Adding undefined winmain ${TARGET}")
#            #else()
#            #target_link_options(${TARGET} INTERFACE -Wl,--undefined,WinMain)
#            #endif()
#        endif()
#        if(TARGET_TYPE STREQUAL "EXECUTABLE")
#            message("${TARGET}: add -mwindows/-mconsole")
#            target_link_options(${TARGET} PRIVATE $<IF:$<BOOL:$<TARGET_PROPERTY:${TARGET},WIN32_EXECUTABLE>>,-mwindows,-mconsole>)
#        endif()
#    endif()
endfunction()
